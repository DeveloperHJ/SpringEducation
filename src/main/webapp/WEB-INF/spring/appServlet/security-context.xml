<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- Spring security 적용에서 제외 시작, core와 관련없어서 security="none" -->
	<http pattern="/resources/**" security="none" />
	<http pattern="/images/**" security="none" />
	<http pattern="/css/**" security="none" />
	<http pattern="/js/**" security="none" />
	<!-- Spring security 적용에서 제외 끝 -->

	<!-- auto-config = "true" : 로그인 페이지/http기본인증/로그아웃 기능들을 제공 -->
	<http auto-config="true" use-expressions="true">
	
		<!-- 
			login-page 로그인 페이지 지정 속성 
			authentication-failure-url 로그인 실패 시 이동페이지 지정 
		 -->
		 <!-- 로그인 페이지와 로그인 실패시 페이지 지정 -->
		<form-login login-page="/login/login" 
					authentication-failure-url="/login/login?fail" />
		
		<!-- access="isAuthenticated()" : 인증된 사용자만 접근 -->
		<intercept-url pattern="/bbs/**" 	access="isAuthenticated()" />
		<intercept-url pattern="/member/**" access="isAuthenticated()" />
		<intercept-url pattern="/member/memberList" access="hasRole('ROLE_ADMIN')" />
		
		<!-- 관리자만 접근 가능 -->
		<intercept-url pattern="/admin/**" access="hasAuthority('ROLE_ADMIN')" />
		
		<!-- access="permitALL" 모든 접근 허용 --> 
		<intercept-url pattern="*/**" access="permitAll()" /> 
		
		<!-- 로그인 성공시 주소 지정 -->
		<form-login default-target-url="/" />
		
		<!-- 로그아웃 주소지정 및 로그아웃 성공시 주소 지정 -->
		<logout logout-url="/logout" logout-success-url="/" 
				delete-cookies="JSESSIONID,SPRING_SECURITY_REMEMBER_ME_COOKIE"/>
		
		<!-- 다중 로그인 방지 -->
		<session-management>
			<concurrency-control max-sessions="1" error-if-maximum-exceeded="true" />
		</session-management>
	</http>
	
	<beans:bean id="encoder" class="org.springframework.security.crypto.password.NoOpPasswordEncoder"/>
	
	<beans:bean id="userService" class="com.kh.myapp.login.dao.LoginDAOImplSecurity"></beans:bean>
	<authentication-manager>
		<!-- UserDetailsService 직접 커스터마이징한 구현 클래스 사용 -->
		<authentication-provider user-service-ref="userService">
			<!-- InMemoryDaoImpl 방식 -->
<!-- 			<user-service>
				<user name="guest" password="{noop}guest" authorities="ROLE_USER" />
				<user name="admin" password="{noop}admin" authorities="ROLE_ADMIN, ROLE_USER" />
			</user-service> -->
			
			<!-- 
			<jdbc-user-service data-source-ref="dataSource"
	         users-by-username-query="select id, passwd, enable from member where id=?"
	         authorities-by-username-query="select t1.id, t2.role from member t1, user_role t2 where t1.id=t2.id and t1.id=?"/>
	          -->
	      <password-encoder ref="encoder"></password-encoder>
		</authentication-provider>
	</authentication-manager>
</beans:beans>
